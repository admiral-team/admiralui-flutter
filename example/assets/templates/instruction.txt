### Инструкция по созданию JSON для интерфейса

**JSON** используется для определения структуры интерфейса с кнопками, контейнерами и другими элементами. Ниже приведены инструкции по созданию JSON для различных типов элементов.

### 1. **`column` - Контейнер для вертикальной коллекции элементов**

**Описание:**  
`column` используется для размещения элементов (например, кнопок) вертикально, один под другим.

**Поля:**
- `id` - уникальный идентификатор контейнера.
- `type` - тип элемента, в данном случае `"column"`.
- `data` - содержит поле `items`, которое является массивом элементов внутри контейнера.

**Пример кода:**

{
    "id": "0",
    "type": "column",
    "data": {
        "items": [
            {
                "id": "1",
                "type": "primary_button",
                "data": {
                    "title": "Button 1",
                    "isEnabled": true,
                    "sizeType": "big"
                }
            },
            {
                "id": "2",
                "type": "primary_button",
                "data": {
                    "title": "Button 2",
                    "isEnabled": true,
                    "sizeType": "big"
                }
            }
        ]
    }
}

### 2. **`row` - Контейнер для горизонтальной коллекции элементов**

**Описание:**  
`row` используется для размещения элементов горизонтально, один за другим.

**Поля:**
- `id` - уникальный идентификатор контейнера.
- `type` - тип элемента, в данном случае `"row"`.
- `data` - содержит поле `items`, которое является массивом элементов внутри контейнера.

**Пример кода:**

{
    "id": "3",
    "type": "row",
    "data": {
        "items": [
            {
                "id": "4",
                "type": "primary_button",
                "data": {
                    "title": "Button 3",
                    "isEnabled": true,
                    "sizeType": "big"
                }
            },
            {
                "id": "5",
                "type": "primary_button",
                "data": {
                    "title": "Button 4",
                    "isEnabled": true,
                    "sizeType": "big"
                }
            }
        ]
    }
}

### 3. **`primary_button` - Основная кнопка**

**Описание:**  
`primary_button` представляет собой интерактивную кнопку.

**Поля:**
- `id` - уникальный идентификатор кнопки.
- `type` - тип элемента, в данном случае `"primary_button"`.
- `data` - содержит данные кнопки, такие как:
  - `title` - текст на кнопке.
  - `isEnabled` - активна ли кнопка (значение `true` или `false`).
  - `sizeType` - размер кнопки (`"big"` или `"custom"`).
- `layout` - (необязательно) параметры размера, такие как `width` (ширина) и `height` (высота).
- `actions` - (необязательно) массив действий, которые выполняются при нажатии на кнопку.

**Пример кода:**

{
    "id": "6",
    "type": "primary_button",
    "data": {
        "title": "Submit",
        "isEnabled": true,
        "sizeType": "big"
    },
    "layout": {
        "width": 200,
        "height": 50
    },
    "actions": [
        {
            "actionName": "didTap",
            "type": "deeplink",
            "data": {
                "link": "http://example.com"
            }
        }
    ]
}

### 4. **`spacer` - Разделитель**

**Описание:**  
`spacer` используется для создания пустого пространства между элементами, например, между кнопками.

**Поля:**
- `id` - уникальный идентификатор разделителя.
- `type` - тип элемента, в данном случае `"spacer"`.

**Пример кода:**

{
    "id": "7",
    "type": "spacer"
}

### 5. **`scroll_view` - Контейнер для прокручиваемого контента**

**Описание:**  
`scroll_view` используется для размещения элементов, которые могут быть прокручиваемы горизонтально или вертикально.

**Поля:**
- `id` - уникальный идентификатор контейнера.
- `type` - тип элемента, в данном случае `"scroll_view"`.
- `data` - содержит следующие данные:
  - `scroll_direction` - направление прокрутки (`"vertical"` или `"horizontal"`).
  - `alignment` - выравнивание элементов (`"leading"`, `"center"`, `"trailing"`).
  - `items` - массив элементов внутри контейнера.

**Пример кода:**

{
    "id": "8",
    "type": "scroll_view",
    "data": {
        "scroll_direction": "vertical",
        "alignment": "leading",
        "items": [
            {
                "id": "9",
                "type": "primary_button",
                "data": {
                    "title": "Scrollable Button 1",
                    "isEnabled": true,
                    "sizeType": "big"
                }
            },
            {
                "id": "10",
                "type": "primary_button",
                "data": {
                    "title": "Scrollable Button 2",
                    "isEnabled": true,
                    "sizeType": "big"
                }
            }
        ]
    }
}

### 6. **`title_header_widget` - Заголовок**

**Описание:**  
`title_header_widget` используется для отображения текстовых заголовков различного стиля и выравнивания в интерфейсе. Этот элемент позволяет создать заголовки, подзаголовки и другие текстовые метки с различными стилями.

**Поля:**
- `id` - уникальный идентификатор заголовка.
- `type` - тип элемента, в данном случае `"title_header_widget"`.
- `data` - содержит данные заголовка, такие как:
  - `text` - текст, который отображается в заголовке.
  - `style` - стиль текста, который определяет внешний вид заголовка. Возможные значения:
    - `"title"` - основной заголовок.
    - `"subtitle"` - подзаголовок.
    - `"headline"` - основной заголовок меньшего размера.
    - `"headlineSecondary"` - дополнительный заголовок.
  - `textAlign` - выравнивание текста. Возможные значения:
    - `"left"` - выравнивание по левому краю.
    - `"center"` - выравнивание по центру.
    - `"right"` - выравнивание по правому краю.

**Пример кода:**

```json
{
    "id": "1",
    "type": "title_header_widget",
    "data": {
        "text": "Title",
        "style": "title",
        "textAlign": "center"
    }
},
{
    "id": "2",
    "type": "title_header_widget",
    "data": {
        "text": "Subtitle",
        "style": "subtitle",
        "textAlign": "left"
    }
},
{
    "id": "3",
    "type": "title_header_widget",
    "data": {
        "text": "Headline",
        "style": "headline",
        "textAlign": "right"
    }
},
{
    "id": "4",
    "type": "title_header_widget",
    "data": {
        "text": "Headline Secondary",
        "style": "headlineSecondary",
        "textAlign": "center"
    }
}
```

### 7. **`standard_text_field` - Текстовое поле**

**Описание:**  
`standard_text_field` используется для ввода и отображения текста пользователем. Это стандартное текстовое поле с различными состояниями и дополнительными элементами, такими как метка, плейсхолдер и информер.

**Поля:**
- `id` - уникальный идентификатор текстового поля.
- `type` - тип элемента, в данном случае `"standard_text_field"`.
- `data` - содержит данные текстового поля, такие как:
  - `text` - текст, который отображается или вводится в текстовое поле.
  - `state` - текущее состояние текстового поля. Возможные значения:
    - `"normal"` - обычное состояние, текстовое поле активно и доступно для ввода.
    - `"error"` - состояние ошибки, возможно отображение ошибки или неправильного ввода.
    - `"readOnly"` - только для чтения, текст в поле не может быть изменен.
    - `"disabled"` - отключенное состояние, поле неактивно и не может быть выбрано.
  - `label_text` - (опционально) текст метки, который отображается над текстовым полем.
  - `placeholder_text` - (опционально) текст плейсхолдера, который отображается, когда поле пустое.
  - `informer_text` - (опционально) дополнительный текст, который может содержать подсказки, инструкции или сообщения.
  - `is_secure` - (опционально) булево значение, определяющее, должно ли текстовое поле скрывать вводимые символы (например, заменяя их звездочками).

**Пример кода:**

```json
{
    "id": "1",
    "type": "standard_text_field",
    "data": {
        "text": "Text",
        "state": "normal",
        "label_text": "Optional label",
        "placeholder_text": "Placeholder",
        "informer_text": "Additional text"
    }
},
{
    "id": "2",
    "type": "standard_text_field",
    "data": {
        "text": "Text",
        "state": "error",
        "label_text": "Optional label",
        "placeholder_text": "Placeholder",
        "informer_text": "Additional text"
    }
},
{
    "id": "3",
    "type": "standard_text_field",
    "data": {
        "text": "Text",
        "state": "readOnly",
        "label_text": "Optional label",
        "placeholder_text": "Placeholder",
        "informer_text": "Additional text"
    }
},
{
    "id": "4",
    "type": "standard_text_field",
    "data": {
        "text": "Text",
        "state": "disabled",
        "label_text": "Optional label",
        "placeholder_text": "Placeholder",
        "informer_text": "Additional text"
    }
}
```

### 8. **`standard_tabs` - Вкладки**

**Описание:**  
`standard_tabs` используется для создания горизонтально расположенных вкладок, каждая из которых представляет отдельную секцию или категорию контента. Вкладки могут содержать заголовки и переключаться между различными разделами интерфейса.

**Поля:**
- `id` - уникальный идентификатор набора вкладок.
- `type` - тип элемента, в данном случае `"standard_tabs"`.
- `items` - массив объектов, каждый из которых представляет отдельную вкладку. Каждая вкладка может иметь следующие поля:
  - `title` - текст, отображаемый на вкладке.

**Пример кода:**

```json
{
    "id": "1",
    "type": "standard_tabs",
    "items": [
        {
            "title": "One"
        },
        {
            "title": "Two"
        }
    ]
},
{
    "id": "2",
    "type": "standard_tabs",
    "items": [
        {
            "title": "One"
        },
        {
            "title": "Two"
        },
        {
            "title": "Three"
        }
    ]
},
{
    "id": "3",
    "type": "standard_tabs",
    "items": [
        {
            "title": "One"
        },
        {
            "title": "Two"
        },
        {
            "title": "Three"
        },
        {
            "title": "Four"
        }
    ]
},
{
    "id": "4",
    "type": "standard_tabs",
    "items": [
        {
            "title": "One"
        },
        {
            "title": "Two"
        },
        {
            "title": "Three"
        },
        {
            "title": "Four"
        },
        {
            "title": "Five"
        }
    ]
}
```

### 9. **`slider_text_field` - Поле с ползунком**

**Описание:**  
`slider_text_field` представляет собой комбинацию текстового поля и ползунка, которая позволяет пользователю вводить значение либо вручную, либо с помощью ползунка. Это удобно для выбора числовых значений в определенном диапазоне.

**Поля:**
- `id` - уникальный идентификатор элемента.
- `type` - тип элемента, в данном случае `"slider_text_field"`.
- `data` - содержит данные для настройки элемента:
  - `text` - текущее значение, отображаемое в текстовом поле.
  - `state` - состояние текстового поля (`"normal"`, `"error"`, `"readOnly"`, `"disabled"`).
  - `label_text` - (необязательно) текст метки для текстового поля.
  - `placeHolder_text` - (необязательно) текст заполнителя для текстового поля.
  - `trailingText` - (необязательно) текст, отображаемый рядом с полем (например, единицы измерения).
  - `informer_text` - (необязательно) дополнительный текст или подсказка под полем.
  - `minLabelText` - минимальное значение для ползунка.
  - `maxLabelText` - максимальное значение для ползунка.
  - `divisions` - количество шагов на ползунке, определяющее дискретизацию выбора.
  - `currentSliderValue` - текущее значение ползунка.

**Пример кода:**

```json
{
    "id": "1",
    "type": "slider_text_field",
    "data": {
        "text": "50000000",
        "state": "normal",
        "label_text": "Optional label",
        "placeholder_text": "",
        "trailingText": "₽",
        "informer_text": "Additional text",
        "minLabelText": 0.0,
        "maxLabelText": 100000000.0,
        "divisions": 100000000,
        "currentSliderValue": 50000000.0
    }
},
{
    "id": "2",
    "type": "slider_text_field",
    "data": {
        "text": "50000000",
        "state": "error",
        "label_text": "Optional label",
        "placeholder_text": "",
        "trailingText": "₽",
        "informer_text": "Additional text",
        "minLabelText": 0.0,
        "maxLabelText": 100000000.0,
        "divisions": 100000000,
        "currentSliderValue": 50000000.0
    }
},
{
    "id": "4",
    "type": "slider_text_field",
    "data": {
        "text": "50000000",
        "state": "disabled",
        "label_text": "Optional label",
        "placeholder_text": "",
        "trailingText": "₽",
        "informer_text": "Additional text",
        "minLabelText": 0.0,
        "maxLabelText": 100000000.0,
        "divisions": 100000000,
        "currentSliderValue": 50000000.0
    }
}
```

### 10. **`double_slider_text_field` - Поле с двумя ползунками**

**Описание:**  
`double_slider_text_field` представляет собой текстовое поле с двумя ползунками, которые позволяют задавать минимальное и максимальное значения в пределах заданного диапазона. Это полезно для выбора диапазонов, например, при выборе ценового интервала.

**Поля:**
- `id` - уникальный идентификатор элемента.
- `type` - тип элемента, в данном случае `"double_slider_text_field"`.
- `data` - содержит данные для настройки элемента:
  - `left_text` - текущее значение для левого ползунка (минимальное значение).
  - `right_text` - текущее значение для правого ползунка (максимальное значение).
  - `state` - состояние поля (`"normal"`, `"error"`, `"readOnly"`, `"disabled"`).
  - `label_text` - (необязательно) текст метки для текстового поля.
  - `placeholderFrom` - (необязательно) текст заполнителя для минимального значения.
  - `placeholderTo` - (необязательно) текст заполнителя для максимального значения.
  - `trailingText` - (необязательно) текст, отображаемый рядом с полем (например, единицы измерения).
  - `informer_text` - (необязательно) дополнительный текст или подсказка под полем.
  - `minValue` - минимальное значение для обоих ползунков.
  - `maxValue` - максимальное значение для обоих ползунков.
  - `divisions` - количество шагов на ползунках, определяющее дискретизацию выбора.
  - `minCurrentSliderValue` - текущее значение левого ползунка.
  - `maxCurrentSliderValue` - текущее значение правого ползунка.

**Пример кода:**

```json
{
    "id": "1",
    "type": "double_slider_text_field",
    "data": {
        "left_text": "10000000",
        "right_text": "50000000",
        "state": "normal",
        "label_text": "Optional label",
        "placeholderFrom": "0.0",
        "placeholderTo": "100000000.0",
        "trailingText": "₽",
        "informer_text": "Additional text",
        "minValue": 0.0,
        "maxValue": 100000000.0,
        "divisions": 100000000,
        "minCurrentSliderValue": 10000000.0,
        "maxCurrentSliderValue": 50000000.0
    }
},
{
    "id": "2",
    "type": "double_slider_text_field",
    "data": {
        "left_text": "10000000",
        "right_text": "50000000",
        "state": "error",
        "label_text": "Optional label",
        "placeholderFrom": "0.0",
        "placeholderTo": "100000000.0",
        "trailingText": "₽",
        "informer_text": "Additional text",
        "minValue": 0.0,
        "maxValue": 100000000.0,
        "divisions": 100000000,
        "minCurrentSliderValue": 10000000.0,
        "maxCurrentSliderValue": 50000000.0
    }
},
{
    "id": "3",
    "type": "double_slider_text_field",
    "data": {
        "left_text": "10000000",
        "right_text": "50000000",
        "state": "disabled",
        "label_text": "Optional label",
        "placeholderFrom": "0.0",
        "placeholderTo": "100000000.0",
        "trailingText": "₽",
        "informer_text": "Additional text",
        "minValue": 0.0,
        "maxValue": 100000000.0,
        "divisions": 100000000,
        "minCurrentSliderValue": 10000000.0,
        "maxCurrentSliderValue": 50000000.0
    }
}
```

### Общий пример:

Создадим пример интерфейса, который включает колонку с двумя кнопками, разделенными разделителем:

{
    "data": {
        "items": [
            {
                "id": "0",
                "type": "column",
                "data": {
                    "items": [
                        {
                            "id": "1",
                            "type": "primary_button",
                            "data": {
                                "title": "Top Button",
                                "isEnabled": true,
                                "sizeType": "big"
                            }
                        },
                        {
                            "id": "2",
                            "type": "spacer"
                        },
                        {
                            "id": "3",
                            "type": "primary_button",
                            "data": {
                                "title": "Bottom Button",
                                "isEnabled": true,
                                "sizeType": "big"
                            }
                        }
                    ]
                }
            }
        ]
    }
}

Эта структура создаст интерфейс с вертикальной колонкой, содержащей две кнопки, разделенные пустым пространством.

### 11. **`calendar` - Календарь**

**Описание:**  
`calendar` представляет собой компонент, позволяющий пользователю выбирать даты или диапазоны дат из календаря. В зависимости от типа календаря (vertical или horizontal), пользователь может взаимодействовать с компонентом по-разному. Компонент поддерживает выбор как одной даты, так и диапазона дат.
**Поля:**
- `id` - уникальный идентификатор элемента.
- `type` - тип элемента, в данном случае "calendar".
- `data` - содержит данные для настройки элемента:
    - style - стиль календаря, может быть "vertical" или "horizontal".
    - startDate - (необязательно) начальная дата отображаемого периода. Пример формата даты "1.1.2022"
    - endDate - (необязательно) конечная дата отображаемого периода. Пример формата даты "1.1.2023"
    - currentDate - (необязательно) текущая дата. Пример формата даты "10.1.2022"
    - selectedStartDate - (необязательно) выбранная начальная дата диапазона. Пример формата даты "10.1.2022"
    - selectedEndDate - (необязательно) выбранная конечная дата диапазона. Пример формата даты "18.1.2022"
    
Вертикальный календарь занимает всю высоту экрана.

**Пример кода для вертикального календаря:**

```json
{
    "data": {
        "items": [
            {
                "id": "0",
                "type": "column",
                "data": {
                    "items": [
                        {
                            "id": "1",
                            "type": "calendar",
                            "data": {
                                "style": "vertical",
                                "startDate": "1.1.2022",
                                "currentDate": "1.1.2022",
                                "endDate": "1.1.2024",
                                "selectedStartDate": "10.1.2022",
                                "selectedEndDate": "20.1.2022"
                            }
                        }
                    ]
                }
            }
        ]
    }
}
```

**Пример кода для горизонтального календаря:**

```json
{
    "data": {
        "items": [
            {
                "id": "1",
                "type": "calendar",
                "data": {
                    "style": "horizontal",
                    "startDate": "1.1.2022",
                    "currentDate": "1.1.2022",
                    "endDate": "1.1.2024",
                    "selectedStartDate": "10.2.2022",
                    "selectedEndDate": "20.2.2022"
                }
            }                             
        ]
    }
}
```

### 12. **`tag_control` - Тег-контрол**

**Описание:**  
`tag_control` представляет собой метку или тег, который может содержать текст, иконки и другие элементы. Теги используются для отображения краткой информации и могут иметь различные стили, указывающие на их статус или важность. Теги также могут быть интерактивными и содержать действия, такие как нажатие.

**Поля:**
- `id` - уникальный идентификатор элемента.
- `type` - тип элемента, в данном случае `"tag_control"`.
- `data` - содержит данные для настройки элемента:
    - leadingText - (необязательно) текст, отображаемый слева от основного текста тега.
    - trailingText - (необязательно) текст, отображаемый справа от основного текста тега.
    - leadingIcon - (необязательно) иконка, отображаемая слева от основного текста тега. Содержит:
        - codePoint - код иконки в формате Unicode.
        - fontFamily - имя шрифта, используемого для отображения иконки.
    - trailingIcon - (необязательно) иконка, отображаемая справа от основного текста тега. Содержит:
        - codePoint - код иконки в формате Unicode.
        - fontFamily - имя шрифта, используемого для отображения иконки.
    - title - основной текст тега.
    - style - стиль тега, определяющий его цвет и внешний вид ("normal", "success", "additional", "error", "attention").
    - isEnabled - (необязательно) указывает, активен ли тег (если false, тег отображается как неактивный).
    - actions - (необязательно) массив действий, которые выполняются при нажатии на кнопку.


**Пример кода:**

```json
{
    "id": "3",
    "type": "tag_control",
    "data": {
        "leadingText": "Leading Text",
        "leadingIcon": {
            "codePoint": "0x1F431",
            "fontFamily": "MaterialIcons"
        },
        "title": "Tag Title",
        "trailingText": "Trailing Text",
        "trailingIcon": {
            "codePoint": "0x1F431",
            "fontFamily": "MaterialIcons"
        },
        "trailingButtonIcon": {
            "codePoint": "0x1F431",
            "fontFamily": "MaterialIcons"
        },
        "style": "normal",
        "isEnabled": true,
        "actions": [
            {
                "actionName": "didTap",
                "type": "deeplink",
                "data": {
                    "link": "buttons_template.json"
                }
            }
        ]
    }
}
```


### 13. **`button_drop_down` - Выпадающая кнопка**

**Описание:**  
`button_drop_down` представляет собой элемент интерфейса, который отображает кнопку с возможностью выполнения действия по нажатию. Этот элемент позволяет пользователю инициировать действие через кнопку, которая может быть активной или неактивной.

**Поля:**
- `id` - уникальный идентификатор элемента.
- `type` - тип элемента, в данном случае `"button_drop_down"`.
- `data` - содержит данные для настройки элемента:
  - `buttonTitle` - текст, отображаемый на кнопке.
  - `isEnabled` - флаг, указывающий, активна ли кнопка (`true` - активна, `false` - неактивна).
- `actions` - список действий, связанных с кнопкой:
  - `actionName` - имя действия, например, `"didTap"`, указывающее на действие по нажатию кнопки.
  - `type` - тип действия, в данном случае `"deeplink"`.
  - `data` - содержит данные для выполнения действия:
    - `link` - ссылка на ресурс, который открывается при выполнении действия.

**Пример кода:**

```json
{
    "id": "1",
    "type": "button_drop_down",
    "data": {
        "buttonTitle": "Button",
        "isEnabled": true
    },
    "actions": [
        {
            "actionName": "didTap",
            "type": "deeplink",
            "data": {
                "link": "buttons_template.json"
            }
        }
    ]
}
```

### 14. **`title_button_drop_down` - Заголовок с кнопкой справа**

**Описание:**  
`title_button_drop_down` представляет собой элемент интерфейса, который сочетает в себе заголовок и кнопку, расположенную справа. Этот элемент часто используется для выбора или выполнения определённого действия, связанного с заголовком.

**Поля:**
- `id` - уникальный идентификатор элемента.
- `type` - тип элемента, в данном случае `"title_button_drop_down"`.
- `data` - содержит данные для настройки элемента:
  - `title` - текст заголовка, отображаемого слева.
  - `buttonTitle` - текст кнопки, расположенной справа от заголовка.
  - `isEnabled` - флаг, указывающий, активна ли кнопка (`true` - активна, `false` - неактивна).
- `actions` - список действий, связанных с кнопкой:
  - `actionName` - имя действия, например, `"didTap"`, указывающее на действие по нажатию кнопки.
  - `type` - тип действия, в данном случае `"deeplink"`.
  - `data` - содержит данные для выполнения действия:
    - `link` - ссылка на ресурс, который открывается при выполнении действия.

**Пример кода:**

```json
{
    "id": "3",
    "type": "title_button_drop_down",
    "data": {
        "title": "Title",
        "buttonTitle": "Button",
        "isEnabled": true
    },
    "actions": [
        {
            "actionName": "didTap",
            "type": "deeplink",
            "data": {
                "link": "buttons_template.json"
            }
        }
    ]
}
```

### 15. **`paragraph_view` - Параграф с опциональным изображением**

**Описание:**  
`paragraph_view` представляет собой элемент интерфейса, отображающий параграф текста с возможностью добавления опционального изображения (значка) перед текстом и/или после текста. Этот элемент полезен для отображения текстовой информации с визуальными индикаторами или элементами.

**Поля:**
- `id` - уникальный идентификатор элемента.
- `type` - тип элемента, в данном случае `"paragraph_view"`.
- `data` - содержит данные для настройки элемента:
  - `title` - текст параграфа.
  - `paragraphImageType` - тип изображения перед текстом:
    - `point` - круглый значок.
    - `check` - значок галочки.
  - `textAligment` - выравнивание текста (`"left"`, `"center"`, и др.).
  - `paragraphStyle` - стиль параграфа (`"primary"`, `"secondary"` и др.).
  - `isEnabled` - флаг, указывающий, активен ли параграф (`true` - активен, `false` - неактивен).
  - `trailingIcon` - (необязательно) иконка, отображаемая справа от параграфа. Содержит:
    - `codePoint` - код иконки в формате Unicode.
    - `fontFamily` - имя шрифта, используемого для отображения иконки.

**Пример кода:**

```json
{
    "id": "0",
    "type": "paragraph_view",
    "data": {
        "title": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        "trailingIcon": {
            "codePoint": "0xe5c8",
            "fontFamily": "MaterialIcons"
        },
        "textAligment": "left",
        "paragraphStyle": "primary",
        "isEnabled": true
    }
}
```