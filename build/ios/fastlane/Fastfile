fastlane_require 'dotenv'
require_relative 'build_info'
require_relative 'version'
require_relative 'utils'
require_relative 'appcenter'
require_relative 'github'
require_relative 'release'
require_relative 'deploy'
require_relative 'telegram'
require_relative 'result.rb'
require_relative 'demo.rb'
require 'fastlane'

before_all do
  Dotenv.overload('.env', '.env.secret')
end

# Deploy Methods
lane :deploy_appcenter_andoid_dev do |options|
  deploy_appcenter_andoid_dev(options: options)
  send_telegram_message(
    options: options,
    build_info_hash: lane_context[SharedValues::APPCENTER_BUILD_INFORMATION],
    platform: 'Android ü§ñ',
    app_name: ENV['APPCENTER_APP_ANDROID_NAME_DEV']
  )
end

lane :deploy_appcenter_dev do |options|
  issue_name = options[:issue_name]
  build_number = generate_random_build_number()
  current_directory = File.expand_path('../..', __FILE__)
  release = firebase_app_distribution(
    app: "1:792224744111:ios:a52fac26e4fe3887708a5a",
    ipa_path: current_directory + "/Release/AdmiralUI-Example/Dev/admiralui-flutter-example.ipa",
    release_notes: "Branch #{issue_name} Build Number: #{build_number}",
    groups: "Testers"
  )
  puts "Release Info #{lane_context[SharedValues::FIREBASE_APP_DISTRO_RELEASE]}"
  send_telegram_message(
    options: options,
    build_info_hash: lane_context[SharedValues::FIREBASE_APP_DISTRO_RELEASE],
    platform: 'iOS üçè',
    app_name: ENV['APPCENTER_APP_NAME_DEV']
  )
end

#Github
lane :send_build_failed_info do |options|
  send_build_failed_info(options: options, build_info_hash: lane_context[SharedValues::APPCENTER_BUILD_INFORMATION])
end

lane :get_all_github_request_builds_and_remove do |options|
  get_all_github_request_builds_and_remove(options: options)
end

lane :link_issue do |options|
  result = link_issue(options: options)
  if result.status == "Error"
    UI.error(result.description)
  end

  if result.status == "Success"
    UI.success(result.description)
  end
end

lane :unlock_secrets_keychain do |options|
  unlock_secrets_keychain(options: options)
end

lane :check_close_release_issue do |options|
  is_success = check_close_release_issue();
  if is_success
    UI.success("–í–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–ª–∏–∑—É!");
  else
    UI.user_error!("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ milestone –ø–µ—Ä–µ–¥ –≤—ã–ø—É—Å–∫–æ–º.");
  end
end

#Supporting Methods
lane :increment_app_version do |options|
  increment_app_version(options: options)
end

lane :set_version do |options|
  set_release_version(options: options)
end

lane :finish_release_version do |options|
  finish_release_version(options: options)
end

lane :start_next_release_version do
  start_next_release_version(options: options)
end

#Build Remote Demo Methods
lane :build_remote_demo do |options|
  build_remote_demo(options: options)
end
