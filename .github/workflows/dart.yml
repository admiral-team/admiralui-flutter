name: Build Flutter App
on:
  push:
    branches: [ main ]
  pull_request:
    types: [ 'opened', 'synchronize', 'reopened', 'closed' ]
    branches: [ 'main', 'develop', 'feature/**', 'rc/**' ]
  workflow_dispatch:

jobs:
  set-pull-request:
    name: Set Pull Request
    runs-on: [ self-hosted, main, flutter ]
    if: github.event.action == 'opened'
    env:
      API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      APPCENTER_API_TOKEN_IOS_DEV: ${{ secrets.APPCENTER_API_TOKEN_IOS_DEV }}
      APPCENTER_API_TOKEN_IOS_PROD: ${{ secrets.APPCENTER_API_TOKEN_IOS_PROD }}
      CI_PASSWORD: ${{ secrets.CI_PASSWORD }}
      PUll_REQUEST_NUMBER: ${{ github.event.number }}
      CI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TELEGRAM_DEV_CHAT_ID: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
      TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
      APPCENTER_API_TOKEN_ANDROID_DEV: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_DEV }}
      APPCENTER_API_TOKEN_ANDROID_PROD: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_PROD }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Fastlane Dependencies
        run: cd build/ios/fastlane && bundle install && bundle update
      - name: Link issue
        run: cd build/ios/fastlane && bundle exec fastlane link_issue issue_name:${{ github.head_ref }} pull_request_number:${{ github.event.number }}

  
  setup:
    name: Setup Environment
    runs-on: [ self-hosted, main, flutter ]
    env:
      API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      APPCENTER_API_TOKEN_IOS_DEV: ${{ secrets.APPCENTER_API_TOKEN_IOS_DEV }}
      APPCENTER_API_TOKEN_IOS_PROD: ${{ secrets.APPCENTER_API_TOKEN_IOS_PROD }}
      CI_PASSWORD: ${{ secrets.CI_PASSWORD }}
      PUll_REQUEST_NUMBER: ${{ github.event.number }}
      CI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TELEGRAM_DEV_CHAT_ID: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
      TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
      APPCENTER_API_TOKEN_ANDROID_DEV: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_DEV }}
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
      - run: flutter --version
      - name: Analyze Flutter env
        run: flutter doctor -v
      - name: Check Lint issues
        run: flutter analyze --fatal-infos
      - name: Install dependencies
        run: flutter pub get
      - name: Install Fastlane Dependencies
        run: cd build/ios/fastlane && bundler update && bundler install
      - name: Check If Setup Failed
        if: ${{ failure() }}
        run: |
          cd build/ios/fastlane && bundle install && bundle update &&
           bundle exec fastlane send_build_failed_info issue_name:${{ github.head_ref }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID" build_url:"${{ github.event.number }}"

  build-web:
    name: Build Web App
    needs: setup
    runs-on: [ self-hosted, main, flutter ]
    if: github.event.action != 'closed'
    steps:
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.8'
          channel: 'stable'
          architecture: x64
          distribution: 'zulu'
          java-version: '11'
      - run: cd example && flutter build web
      - name: Check If Build Web Failed
        if: ${{ failure() }}
        run: |
          cd build/ios/fastlane && bundle install && bundle update &&
           bundle exec fastlane send_build_failed_info issue_name:${{ github.head_ref }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID" build_url:"${{ github.event.number }}"

  deploy-android:
    name: Deploy Android App
    needs: build-web
    runs-on: [ self-hosted, main, flutter ]
    if: github.event.action != 'closed'
    env:
      API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      APPCENTER_API_TOKEN_IOS_DEV: ${{ secrets.APPCENTER_API_TOKEN_IOS_DEV }}
      APPCENTER_API_TOKEN_IOS_PROD: ${{ secrets.APPCENTER_API_TOKEN_IOS_PROD }}
      CI_PASSWORD: ${{ secrets.CI_PASSWORD }}
      PUll_REQUEST_NUMBER: ${{ github.event.number }}
      CI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TELEGRAM_DEV_CHAT_ID: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
      TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
      APPCENTER_API_TOKEN_ANDROID_DEV: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_DEV }}
      APPCENTER_API_TOKEN_ANDROID_PROD: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_PROD }}
    steps:
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.8'
          channel: 'stable'
          architecture: x64
          distribution: 'zulu'
          java-version: '11'
      - run: cd example && flutter pub get
      - run: cd example && flutter build apk && flutter build appbundle
      - name: Upload apk to Firebase
        run: |
          cd example/android && ./gradlew updateReleaseNotesTask --releaseNotes='commits_url = ${{ toJSON(github.event.pull_request.commits_url) }} , branch = ${{ github.head_ref || github.ref_name }}'
          ./gradlew appDistributionUploadRelease
  test:
    name: Test App
    runs-on: [ self-hosted, main, flutter ]
    if: github.event.action != 'closed'
    needs: deploy-android
    steps:
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.8'
          channel: 'stable'
          architecture: x64
          distribution: 'zulu'
          java-version: '11'
      - run: cd example && flutter test
      - name: Check If Test Failed
        if: ${{ failure() }}
        run: |
          cd build/ios/fastlane && bundle install && bundle update &&
           bundle exec fastlane send_build_failed_info issue_name:${{ github.head_ref }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID" build_url:"${{ github.event.number }}"

  build_demo_remote:
    name: Build remote demo project
    runs-on: [ self-hosted, main, flutter ]
    if: github.event.action != 'closed'
    needs: deploy-ios-dev
    env:
      API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      CI_PASSWORD: ${{ secrets.CI_PASSWORD }}
      PUll_REQUEST_NUMBER: ${{ github.event.number }}
      CI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TELEGRAM_DEV_CHAT_ID: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
      TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.8'
          channel: 'stable'
          architecture: x64
          distribution: 'zulu'
          java-version: '11'
      - name: Change Remote Branch Name
        run: cd build/ios/fastlane && bundle install && bundle update && bundle exec fastlane build_remote_demo issue_name:${{ github.head_ref }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID" build_url:"${{ github.event.number }}"
      - name: Check If Setup Failed
        if: ${{ failure() }}
        run: |
          cd build/ios/fastlane && bundle install && bundle update &&
           bundle exec fastlane send_build_failed_info issue_name:${{ github.head_ref }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID" build_url:"${{ github.event.number }}"
      - name: Install dependencies
        run: cd remote_demo && flutter pub get
      - name: Check If Setup Failed
        if: ${{ failure() }}
        run: |
          cd build/ios/fastlane && bundle install && bundle update &&
           bundle exec fastlane send_build_failed_info issue_name:${{ github.head_ref }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID" build_url:"${{ github.event.number }}"
      - run: cd remote_demo && flutter build web
      - name: Test build android
        run: cd remote_demo && flutter build apk && flutter build appbundle
      - name: Test build iOS
        run: cd remote_demo/lib && flutter build ios

  deploy-ios-dev:
    name: Deploy iOS Appcenter Development
    needs: test
    runs-on: [ self-hosted, main, flutter ]
    if: github.event.action != 'closed'
    env:
      API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      APPCENTER_API_TOKEN_IOS_DEV: ${{ secrets.APPCENTER_API_TOKEN_IOS_DEV }}
      APPCENTER_API_TOKEN_IOS_PROD: ${{ secrets.APPCENTER_API_TOKEN_IOS_PROD }}
      CI_PASSWORD: ${{ secrets.CI_PASSWORD }}
      PUll_REQUEST_NUMBER: ${{ github.event.number }}
      CI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TELEGRAM_DEV_CHAT_ID: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
      TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
      IOS_GOOGLE_API_KEY: ${{ secrets.IOS_GOOGLE_API_KEY }}
    steps:
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.8'
          channel: 'stable'
          architecture: x64
          distribution: 'zulu'
          java-version: '11'
      - name: Set Xcode Command Line Tools Path
        run: sudo -S <<< "$CI_PASSWORD" xcode-select --switch /Applications/Xcode.app
      - name: Unlock Fastlane Secrets Keychain
        run: cd build/ios/fastlane && bundle exec fastlane unlock_secrets_keychain password:"$CI_PASSWORD"
      - name: Add FireBase Lane App Distribution
        run: cd build/ios/fastlane && fastlane add_plugin firebase_app_distribution
      - name: Write Env to Config
        run: cd example/ios && touch .env && echo "GOOGLE_API_KEY=$IOS_GOOGLE_API_KEY" > .env
      - name: Build iOS App
        run: cd example/lib && flutter build ios
      - name: Deploy iOS App Firebase
        if: ${{ github.event_name == 'pull_request' }}
        run: cd build/ios/fastlane && bundle exec fastlane deploy_firebase_dev issue_name:${{ github.head_ref }} pull_request_number:${{ github.event.number }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID"
      - name: Check If Deploy iOS Appcenter Failed
        if: ${{ failure() }}
        run: |
          cd build/ios/fastlane && bundle install && bundle update &&
           bundle exec fastlane send_build_failed_info issue_name:${{ github.head_ref }} telegram_token:"$TELEGRAM_API_TOKEN" telegram_chat_id:"$TELEGRAM_DEV_CHAT_ID" build_url:"${{ github.event.number }}"
  
  remove-appcenter-build:
    name: Remove Appcenter Builds
    needs: setup
    runs-on: [ self-hosted, main, flutter ]
    if: github.event_name == 'pull_request' && (github.event.action == 'closed' || github.event.pull_request.merged)
    env:
      API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      APPCENTER_API_TOKEN_IOS_DEV: ${{ secrets.APPCENTER_API_TOKEN_IOS_DEV }}
      APPCENTER_API_TOKEN_IOS_PROD: ${{ secrets.APPCENTER_API_TOKEN_IOS_PROD }}
      CI_PASSWORD: ${{ secrets.CI_PASSWORD }}
      PUll_REQUEST_NUMBER: ${{ github.event.number }}
      CI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TELEGRAM_DEV_CHAT_ID: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
      TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
      APPCENTER_API_TOKEN_ANDROID_DEV: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_DEV }}
      APPCENTER_API_TOKEN_ANDROID_PROD: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_PROD }}
    steps:
      - name: Install Fastlane Dependencies
        run: cd build/ios/fastlane && bundle install && bundle update
      - name: Remove all builds from request
        run: cd build/ios/fastlane && bundle exec fastlane get_all_github_request_builds_and_remove pull_request_number:${{ github.event.number }}

  check-release-issue:
    name: Check Release Issue
    needs: deploy-ios-dev
    runs-on: [ self-hosted, main, flutter ]
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    env:
      API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}
      APPCENTER_API_TOKEN_IOS_DEV: ${{ secrets.APPCENTER_API_TOKEN_IOS_DEV }}
      APPCENTER_API_TOKEN_IOS_PROD: ${{ secrets.APPCENTER_API_TOKEN_IOS_PROD }}
      CI_PASSWORD: ${{ secrets.CI_PASSWORD }}
      PUll_REQUEST_NUMBER: ${{ github.event.number }}
      CI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TELEGRAM_DEV_CHAT_ID: ${{ secrets.TELEGRAM_DEV_CHAT_ID }}
      TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
      APPCENTER_API_TOKEN_ANDROID_DEV: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_DEV }}
      APPCENTER_API_TOKEN_ANDROID_PROD: ${{ secrets.APPCENTER_API_TOKEN_ANDROID_PROD }}
    steps:
      - name: Install Fastlane Dependencies
        run: cd build/ios/fastlane && bundle install && bundle update
      - name: Check Release Issue
        run: cd build/ios/fastlane && bundle exec fastlane check_close_release_issue
  

